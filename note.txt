if (inputMessage.trim() === "") return; // Prevent empty messages

  // Send the message to the backend to store it in MySQL and get a bot response
  axios
    .post("http://localhost:5000/api/message", { message: inputMessage })
    .then((response) => {
      const botMessage = { sender: "bot", text: response.data.response };
      setMessages((prevMessages) => [...prevMessages, botMessage]);
    })
    .catch((error) => {
      console.error("Error sending message:", error);
    });

  // Clear input field
  setInputMessage("");


  ------------------------------------------------------------------------

  server.js file workedbefore the NLP


  const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const mysql = require('mysql2');

// Import the storeMessage function from messageStorage.js
const { storeMessage } = require('./messageStorage');

const app = express();
const PORT = 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Create a MySQL connection
const db = mysql.createConnection({
  host: 'localhost', // MySQL host
  user: 'root',      // MySQL username
  password: 'sachin1605', // MySQL password
  database: 'chatbot_db'  // MySQL database
});

// Connect to MySQL
db.connect((err) => {
  if (err) {
    console.error('Error connecting to MySQL:', err);
    return;
  }
  console.log('Connected to MySQL database');
});

// Endpoint to handle messages
app.post('/api/message', (req, res) => {
  const { message } = req.body;

  // Pass the message to messageStorage.js
  storeMessage(message);

  // Insert message into the database
  const sql = 'INSERT INTO messages (message) VALUES (?)';
  db.query(sql, [message], (err, result) => {
    if (err) {
      console.error('Error inserting message into MySQL:', err);
      res.status(500).json({ error: 'Failed to save message to the database' });
      return;
    }

    console.log('Message inserted into MySQL with ID:', result.insertId);

    // Generate a bot response
    const botResponse = `Received your message: "${message}"`;

    // Send response back to frontend
    res.json({ response: botResponse });
  });
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
----------------------------------------------------------------------------------


message server code working server stopeed because of duplicated response code


const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
const PORT = 5001;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Endpoint to handle messages
app.post('/api/message', (req, res) => {
  const { message } = req.body;

  // Here, process the message or use AI/chatbot logic
  const botResponse = `Received your message - server : 5001 no database "${message}"`;

  // Send response back to frontend
  res.json({ response: botResponse });
});

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});



-------------------------------------------------------------------

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
const PORT = 5001;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Endpoint to handle messages
app.post('/api/message', (req, res) => {
  const { message } = req.body;

  // Here, process the message or use AI/chatbot logic
  const botResponse = `Received your message - server : 5001 no database "${message}"`;

  // Send response back to frontend
  res.json({ response: botResponse });
});

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

________________________________________________________________________________




